import os
import sys
import json

from ModuroModel.Sd.JsonBasedModelUa import JsonBasedModelUa


class JsonBasedModelDa(JsonBasedModelUa):
    def __init__(self, sim, simthread):
        print "Simthread:", simthread
        self.simthread = simthread
        JsonBasedModelUa.__init__(self, sim, simthread)

    # this will be called in __init__ - method of the ModelConfig
    def _initModel(self):
        import CompuCellSetup
        # simFileName=self.simthread.getSimFileName()
        cc3dModelJsonFileName = "moduroCC3DModellConfiguration.json"
        # the simulationFileName can only be accessed, if you run the script by opening the cc3d-file
        # with runScript.bat. There is an issue about this in the github repo of Compucell
        # https://github.com/CompuCell3D/CompuCell3D/issues/35
        cc3dFileParentPath = CompuCellSetup.simulationFileName
        print "CompuCellSetup.simulationFileName:",cc3dFileParentPath
        # the config file i located in the same dir as the cc3dFile
        # print "cc3dPATH: ",cc3dFileParentPath
        targetJsonFile = os.path.join(os.path.dirname(cc3dFileParentPath), cc3dModelJsonFileName)
        print "TargetJsonFile: ",targetJsonFile
        # This model is based on a json file
        # please see the example files "parameterDumpJsonExport.json"
        if not targetJsonFile.endswith(".json"):
            print(
                "Invalid parameter. Has to be a filepath ending with .json, is currently".format(
                    targetJsonFile))

        if not os.path.exists(targetJsonFile) == True:
            print('File does not exist: {}'.format(targetJsonFile))
            sys.exit(1)

        # print("Will load parameters from json file:: {}".format(targetJsonFile))
        with open(targetJsonFile) as json_data:
            loadedJson = json.load(json_data)
            print 'loaded json:', loadedJson
            print 'generating Celltypes based on json. IMPORTANT: ' \
                  'MEDIUM and BASALMEMBRANE will be ignored. Default setup will be used.'

            self.cellTypes = self.createCellTypesByJson(loadedJson)
            self.energyMatrix = self._createEnergyMatrix()
            print "EnergyMatrix has been generated by default value: ", self.energyMatrix

            modelName = loadedJson['parameterDumpModel']['name']
            print 'model name will be: ', modelName
            self.name = modelName

            print 'Setting adhFactor, adhEnergy based on json values'
            self.adhFactor = loadedJson['parameterDumpModel']['adhFactor']
            self.adhEnergy = loadedJson['parameterDumpModel']['adhEnergy']

            # some parameters refer to celltypes
            # print("Executing run")
            # self._run()  # Must be the last statement.

    def _createEnergyMatrix(self):
        energyMatrix = [[0, 14, 14, 14, 14, 4],
                        [0, -1, 1, 3, 12, 12],
                        [0, 0, 6, 4, 8, 14],
                        [0, 0, 0, 5, 8, 12],
                        [0, 0, 0, 0, 6, 4],
                        [0, 0, 0, 0, 0, 2]]
        return energyMatrix

    # This Model requires two configuration files.
    # Config file 1: This contains the path to the config file 2
    # Config gilr 2: This contains the parameters of the current model

    def getTargetJsonFilePath(self, simthread):
        # the json model config has to be located in the same dir as the cc3d file
        simFileName = simthread.getSimFileName()
        cc3dModelJsonFileName = "moduroCC3DModellConfiguration.json"
        # currentPath = os.path.dirname(os.path.realpath(__file__))
        currentPath = os.path.dirname(os.path.dirname(simFileName))
        constantRunJsonCc3DConfigJsonFileName = os.path.join(currentPath, cc3dModelJsonFileName)
        if not os.path.exists(constantRunJsonCc3DConfigJsonFileName) == True:
            sys.exit("Configuration File for JSON-Based Model could not be found: {}.".format(
                constantRunJsonCc3DConfigJsonFileName))

        # print "Found config file:", constantRunJsonCc3DConfigJsonFileName

        with open(constantRunJsonCc3DConfigJsonFileName) as configJson:
            runJsonBasedModelConfigJson = json.load(configJson)
            # print "config:", runJsonBasedModelConfigJson
            targetJsonFilePath = runJsonBasedModelConfigJson['RunJsonCc3DConfig']['targetJsonModelPath']

        if not targetJsonFilePath.endswith(".json"):
            print("Invalid parameter. Has to be a filepath ending with .json, is currently".format(targetJsonFilePath))

        if not os.path.exists(targetJsonFilePath) == True:
            print('File does not exist: {}'.format(targetJsonFilePath))
            sys.exit("No JSON file found to describe model at {} . Check your configuration file at {}".format(
                targetJsonFilePath, constantRunJsonCc3DConfigJsonFileName))

        return targetJsonFilePath
